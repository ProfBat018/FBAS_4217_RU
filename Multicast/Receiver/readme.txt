Readme для Сетевого программирования.

Читать обязательно!
Максим, читай до конца.
Гугли, если не понятно или пиши в группу.


TCP - Transmission Control Protocol
Это протокол для передачи данных по сети. Он работает поверх IP протокола(Internet Protocol).

UDP - User Datagram Protocol
Это протокол для передачи данных по сети. Он работает поверх IP протокола(Internet Protocol).

Что такое IP протокол?
Это протокол для передачи данных по сети. Он работает поверх Ethernet протокола.

Что такое Ethernet протокол?
Это протокол для передачи данных по сети. Он работает поверх физического уровня.

И на этом моменте мы с вами вспоминаем модель OSI и понимаем, что TCP работает на уровне 4, а IP на уровне 3.
TCP отправляет данные в виде сегментов, UDP отправляет пакеты в виде Datagramm ,IP в виде пакетов.

DataGramm - это набор байтов, которые отправляются в сеть.
Максимальный размер пакета в UDP - 65507 байт.

Разница между сегментом и пакетом?

Сегмент - это набор байтов, которые отправляются в сеть, работает на Транспортном уровне.
Пакет - это набор байтов, которые отправляются в сеть, работает на Сетевом уровне.
Фрейм - это набор байтов, которые отправляются в сеть, работает на Канальном уровне.

(❤️´艸｀❤️)
Отсылка:
    Модель OSI
    1. Физический уровень - передача битов, сигналов по кабелю. Но нельзя отрицать и радиоволны.
    2. Канальный уровень - передача фреймов по каналу, например по Ethernet. 
        В свою очередь Ethernet работает поверх физического уровня.
    3. Сетевой уровень - передача пакетов по сети, например по IP. 
        На сетевом уровне происходит маршрутизация.
        Маршрутизация - это определение пути, по которому пакет будет передан.
        В свою очередь IP работает поверх канального уровня. 
    4. Транспортный уровень - передача сегментов по сети, например по TCP. 
        В свою очередь TCP работает поверх сетевого уровня.
    5. Сеансовый уровень - управление сеансами, например установка соединения или разрыв соединения.
        Работает с помощью протокола TCP.
    6. Представление - преобразование данных в формат, понятный сети.
        Например, преобразование данных в биты.
    7. Прикладной уровень - передача данных приложениям, например браузеру.
        Например, передача данных в формате HTML.
        Это уже максимально понятный для пользователя формат.
(❤️´艸｀❤️)    

Unicast - один-к-одному
Multicast - один-ко-многим
Broadcast - один-ко-всем
AnyCast - один-к-одному-из-нескольких

класс Socket - описывает настройки подключения.
класс IpEndPoint в C# хранит информацию о сетевом адресе и порте.

Зачем нужен класс Socket?
Чтобы создать сокет, который будет слушать определенный порт.
Чтобы создать сокет, который будет отправлять данные по определенному порту.

Socket socket = new(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

socket.SetSocketOption(SocketOptionLevel.IP,
    SocketOptionName.AddMembership, new MulticastOption(ip));

SetSocketOption - это метод, который позволяет установить определенные настройки сокета.
SocketOptionLevel.IP - это уровень сокета, на котором мы хотим установить определенные настройки.
SocketOptionName.AddMembership - это опция, которая позволяет присоединиться к группе.
MulticastOption(ip) - это опция, которая позволяет присоединиться к группе.

AddressFamily.InterNetwork - это семейство адресов, которые используются для передачи данных по сети. IPv4.
AddressFamily.InterNetworkV6 - это семейство адресов, которые используются для передачи данных по сети. IPv6.
SocketType.Dgram - это тип сокета, который используется для передачи данных по сети. UDP.
SocketType.Stream - это тип сокета, который используется для передачи данных по сети. TCP.
ProtocolType.Udp - это протокол, который используется для передачи данных по сети. UDP.
ProtocolType.Tcp - это протокол, который используется для передачи данных по сети. TCP.

Как можно увидеть, в данном случае мы создали сокет, который будет слушать работать по протоколу UDP в сети IPv4.

IpEndPoint - хранит информацию о сетевом адресе и порте.
На самом деле можно обойтись без этого класса, но он упрощает работу.

Email протоколы.

SMTP - Simple Mail Transfer Protocol
IMAP - Internet Message Access Protocol
POP3 - Post Office Protocol 3

SMTP VS IMAP VS POP3
SMTP - это протокол для отправки почты. Он работает на уровне приложения, поверх TCP.
IMAP - это протокол для получения почты. Он работает на уровне приложения, поверх TCP.
POP3 - это протокол для получения почты. Он работает на уровне приложения, поверх TCP.

Какая разница между IMAP и POP3?

IMAP - хранит все письма на сервере.
POP3 - хранит все письма на клиенте.

В следтствии чего, IMAP позволяет получать письма с разных устройств, а POP3 нет.

тут можно задать вопрос. Где же тогда нам нужен POP3?

POP3 нужен для того, чтобы получать письма с мобильного телефона, например, когда нет доступа к интернету.

MIME - Multipurpose Internet Mail Extensions

MIME - это стандарт, который позволяет отправлять письма с разными типами данных, 
например, с картинками, аудио, видео, документами.
MIME по умолчанию используется в SMTP.




